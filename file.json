{"files":[{"id":"51fe7e4a-f4a3-4fe3-9f92-f5b4dda16279","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Europe/Madrid\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [\n      {\n        \"userSymbol\": \"Drive\",\n        \"version\": \"v2\",\n        \"serviceId\": \"drive\"\n      },\n      {\n        \"userSymbol\": \"AdminDirectory\",\n        \"version\": \"directory_v1\",\n        \"serviceId\": \"admin\"\n      }\n    ]\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"8bef065c-35d1-4fa3-921b-23448d1d8287","name":"02_adminDirectoryService","type":"server_js","source":"function createUserTeacher(firstName, lastName) {\n  let userName \u003d createErnestLluchTeacherUsername(firstName, lastName);\n  let password \u003d ERNEST_LLUCH_DEFAULT_TEACHER_PASSWORD;\n  let orgUnitPath \u003d ORG_UNIT_TEACHERS;\n  if (addUserServiceAgent(firstName, lastName, userName, password, orgUnitPath) \u003d\u003d false) return false;\n  return true;\n}\n\nfunction createGroup(groupName) {\n  let email \u003d createErnestLluchGroupEmail(groupName);\n  if (createGroupServiceAgent(groupName, email) \u003d\u003d false) return false;\n  return true;\n}\n\nfunction addGroupMemberWithGroupName(groupName, userEmail) {\n  let group \u003d getGroupServiceAgent(groupName, DOMINI);\n  if (group \u003d\u003d false) return false;\n  let user \u003d getUserServiceAgent(userEmail);\n  if (user \u003d\u003d false) return false;\n  if (!addGroupMemberServiceAgent(group.email, userEmail)) return false;\n  return true;\n}\n\nfunction deleteGroupMemberWithGroupNameAndMemberEmail(groupName, userEmail) {\n  let group \u003d getGroupServiceAgent(groupName, DOMINI);\n  if (group \u003d\u003d false) return false;\n  let user \u003d getUserServiceAgent(userEmail);\n  if (user \u003d\u003d false) return false;\n  if (!deleteGroupMemberServiceAgent(group.email, userEmail)) return false;\n  return true;  \n}\n\nfunction deleteGroupWithGroupName(groupName) {\n  let group \u003d getGroupServiceAgent(groupName, DOMINI);\n  if (group \u003d\u003d false) return false; \n  if (!deleteGroupServiceAgent(group.id)) return false;\n  return true;\n}\n\nfunction deleteUserTeacher(userEmail) {\n  let user \u003d getUserServiceAgent(userEmail);\n  if (user \u003d\u003d false) return false;\n  if (deleteUserServiceAgent(user.id) \u003d\u003d false) return false;\n  return true;\n}"},{"id":"dd0190a9-6981-41a0-b1dc-65eed512396e","name":"02_drivesService","type":"server_js","source":"function createSharedDrive(driveName) {\n  if (createSharedDriveServiceAgent(driveName) \u003d\u003d false) return false;\n  return true;\n}\n\nfunction getSharedDrive(driveName) {\n  let sharedDrive \u003d getSharedDriveServiceAgent(driveName);\n  if (sharedDrive \u003d\u003d false) return false;\n  return sharedDrive;\n}\n\nfunction deleteSharedDrive(driveName) {\n  let sharedDrive \u003d getSharedDriveServiceAgent(driveName);\n  if (sharedDrive \u003d\u003d false) return false;\n  if (deleteDriveServiceAgent(sharedDrive.id) \u003d\u003d false) return false;\n  return true;\n}\n\nfunction setPermissionsOrganizerToUserInDrive(driveName, userEmail) {\n  let sharedDrive \u003d getSharedDriveServiceAgent(driveName);\n  if (sharedDrive \u003d\u003d false) return false;\n  if (setPermissionsToElementServiceAgent(sharedDrive.id, userEmail, DriveRoles.ORGANIZER) \u003d\u003d false) return false;\n  return true;\n}\n\nfunction setPermissionsWriterToUserInDrive(driveName, userEmail) {\n  let sharedDrive \u003d getSharedDriveServiceAgent(driveName);\n  if (sharedDrive \u003d\u003d false) return false;\n  if (setPermissionsToElementServiceAgent(sharedDrive.id, userEmail, DriveRoles.WRITER) \u003d\u003d false) return false;\n  return true;}\n\nfunction setPermissionsReaderToUserInDrive(driveName, userEmail) {\n  let sharedDrive \u003d getSharedDriveServiceAgent(driveName);\n  if (sharedDrive \u003d\u003d false) return false;\n  if (setPermissionsToElementServiceAgent(sharedDrive.id, userEmail, DriveRoles.READER) \u003d\u003d false) return false;\n  return true;}\n\nfunction getPermissionForUserInDrive(driveName, emailAddress) {\n  let sharedDrive \u003d getSharedDrive(driveName);\n  if (sharedDrive \u003d\u003d false) return false;\n  let permissions \u003d listPermissionsInElementServiceAgent(sharedDrive.id);\n  for (let i\u003d0; i\u003cpermissions.items.length; i++) {\n    let permissionEmailAddress \u003d permissions.items[i].emailAddress;\n    if (permissionEmailAddress \u003d\u003d emailAddress) return permissions.items[i];\n  }\n  return false;\n}\n\nfunction deletePermissionForUserInDrive(driveName, emailAddress) {\n  let sharedDrive \u003d getSharedDrive(driveName);\n  if (sharedDrive \u003d\u003d false) return false;\n  let permission \u003d getPermissionForUserInDrive(sharedDrive.name, emailAddress);\n  if (permission \u003d\u003d false) return false;\n  if (deletePermissionInElementServiceAgent(sharedDrive.id, permission.id) \u003d\u003d false) return false;\n  return true;\n}\n\nfunction createFolderInSharedDrive(driveName, folderName) {\n  let sharedDrive \u003d getSharedDriveServiceAgent(driveName);\n  if (sharedDrive \u003d\u003d false) return false;\n  return createFolderServiceAgent(folderName, sharedDrive.id);\n}  \n\nfunction createFolderInFolder(parentFolderName, folderName) {\n  let parentFolder \u003d getFolderServiceAgent(parentFolderName);\n  if (parentFolder \u003d\u003d null) return null;\n  return createFolderServiceAgent(folderName, parentFolder.id);\n}\n\nfunction getFolder(folderName) {\n  let folder \u003d getFolderServiceAgent(folderName);\n  if (folder \u003d\u003d false) return false;\n  return folder;\n}\n\nfunction deleteFolder(folderName) {\n  let folder \u003d getFolderServiceAgent(folderName);\n  if (folder \u003d\u003d false) return false;\n  if (deleteFolderServiceAgent(folder.id) \u003d\u003d false) return false;\n  return true;\n}\n\nfunction setPermissionsOrganizerToUserInFolder(folderName, userEmail) {\n  let folder \u003d getFolderServiceAgent(folderName);\n  if (folder \u003d\u003d false) return false;\n  if (setPermissionsToElementServiceAgent(folder.id, userEmail, FileRoles.ORGANIZER) \u003d\u003d false) return false;\n  return true;\n}\n\nfunction setPermissionsWriterToUserInFolder(folderName, userEmail) {\n  let folder \u003d getFolderServiceAgent(folderName);\n  if (folder \u003d\u003d false) return false;\n  if (setPermissionsToElementServiceAgent(folder.id, userEmail, FileRoles.WRITER) \u003d\u003d false) return false;\n  return true;\n}\n\nfunction setPermissionsReaderToUserInFolder(folderName, userEmail) {\n  let folder \u003d getFolderServiceAgent(folderName);\n  if (folder \u003d\u003d false) return false;\n  if (setPermissionsToElementServiceAgent(folder.id, userEmail, FileRoles.READER) \u003d\u003d false) return false;\n  return true;\n}\n\nfunction getPermissionForUserInFolder(folderName, emailAddress) {\n  let folder \u003d getFolderServiceAgent(folderName);\n  if (folder \u003d\u003d false) return false;\n  let permissions \u003d listPermissionsInElementServiceAgent(folder.id);\n  for (let i\u003d0; i\u003cpermissions.items.length; i++) {\n    let permissionEmailAddress \u003d permissions.items[i].emailAddress;\n    if (permissionEmailAddress \u003d\u003d emailAddress) return permissions.items[i];\n  }\n  return false;\n}\n\nfunction deletePermissionForUserInFolder(folderName, emailAddress) {\n  let folder \u003d getFolderServiceAgent(folderName);\n  if (folder \u003d\u003d false) return false;\n  let permission \u003d getPermissionForUserInFolder(folder.title, emailAddress);\n  if (permission \u003d\u003d false) return false;\n  if (deletePermissionInElementServiceAgent(folder.id, permission.id) \u003d\u003d false) return false;\n  return true;\n}\n"},{"id":"7c93a9af-7b15-4846-a54b-64f619208a0e","name":"02_spreadsheetService","type":"server_js","source":"\nfunction sheetExists(sheetname){    \n  ss \u003d getCurrentSpreadsheet();\n  if (ss.getSheetByName(sheetname)!\u003d null) return true;\n  return false;\n}\n\nfunction printAlertInSpreadsheet(text) {\n  SpreadsheetApp.getUi().alert(text);\n}\n\nfunction getDataInSheet(sheetName) {\n  ss \u003d getCurrentSpreadsheet();\n  if (!sheetExists(sheetName))  {\n    printAlertInSpreadsheet(\"Sheet \" + sheetName + \" not found\");\n    return false;\n    }\n  sheet \u003d ss.getSheetByName(sheetName);\n  return sheet.getDataRange().getValues();\n}"},{"id":"af9f64c7-a675-4689-90ee-d187dddd1798","name":"03_adminDirectoryServiceAgent","type":"server_js","source":"// USERS\n//\n// https://developers.google.com/apps-script/advanced/admin-sdk-directory\n// - GET USER\n// - CREATE USER\n// - DELETE USER\n\nfunction getUserServiceAgent(userEmail) {\n  try {\n    const user \u003d AdminDirectory.Users.get(userEmail);\n    return user;\n  } catch (err) {\n    Logger.log(JSON.stringify(err));\n    return false;\n  }\n}\n\nfunction addUserServiceAgent(firstName, lastName, userName, password, orgUnitPath\u003dnull) {\n  let user \u003d {\n    primaryEmail: userName,\n    name: {\n      givenName: firstName,\n      familyName: lastName,\n    },\n    password: password,\n    orgUnitPath: orgUnitPath,\n  };\n  try {\n    return AdminDirectory.Users.insert(user);\n  } catch (err) {\n    Logger.log(JSON.stringify(err));\n    return false;\n  }\n}\n\nfunction deleteUserServiceAgent(userId) {\n  try {\n    AdminDirectory.Users.remove(userId);\n    return true;\n  } catch (err) {\n    Logger.log(JSON.stringify(err));\n    return false;\n  }\n}\n\n// GROUPS\n//\n// https://developers.google.com/apps-script/advanced/admin-sdk-directory\n// https://developers.google.com/admin-sdk/directory/reference/rest\n// - Create group\n// - Get group\n// - Add member\n// - Delete member\n// - Delete group\n\nfunction createGroupServiceAgent(groupName, groupEmail) {\n  let group \u003d {\n  \"email\": groupEmail,\n  \"name\": groupName,\n  \"adminCreated\": true,\n}\n  try {\n    return AdminDirectory.Groups.insert(group);\n  } catch(err) {\n    Logger.log(JSON.stringify(err));\n    return false;\n  }\n}\n\nfunction deleteGroupServiceAgent(groupId) {\n  try {\n    AdminDirectory.Groups.remove(groupId);\n    return true;\n  } catch(err) {\n    Logger.log(JSON.stringify(err));\n    return false;\n  }\n}\n\nfunction getGroupServiceAgent(groupName, domain) {\n  let query \u003d \"name\u003d\u0027\" + groupName + \"\u0027\";\n  let optionalArgs \u003d {\n    domain: domain,\n    maxResults: 1,\n    query: query,\n    viewType: \u0027domain_public\u0027,\n    projection: \u0027full\u0027\n  }\n  try {\n    var groups \u003d AdminDirectory.Groups.list(optionalArgs).groups;\n  } \n  catch(err) {\n    Logger.log(JSON.stringify(err));\n  }\n  if (groups \u0026\u0026 groups.length \u003e 0) return groups[0];\n  return false;\n}\n\nfunction addGroupMemberServiceAgent(groupEmail, userEmail) {\n  const member \u003d {\n    email: userEmail,\n    role: \u0027MEMBER\u0027\n  };\n  try {\n    AdminDirectory.Members.insert(member, groupEmail);\n    return true;\n  } catch (err) {\n    Logger.log(JSON.stringify(err));\n    return false;\n  }\n}\n\nfunction deleteGroupMemberServiceAgent(groupEmail, userId) {\n  try {\n    AdminDirectory.Members.remove(groupEmail, userId);\n    return true;\n  } catch(err) {\n    Logger.log(JSON.stringify(err));\n    return false;\n  }\n}"},{"id":"3c4f941f-aaad-42f7-8c1f-b99a5d2a5893","name":"03_driveServiceAgent","type":"server_js","source":"// SHARED DRIVES\n//\n// - CREATE SHARED DRIVE\n// - GET SHARED DRIVE\n\nfunction createSharedDriveServiceAgent(driveName) {\n  let sharedDrive \u003d getSharedDriveServiceAgent(driveName);\n  if (sharedDrive !\u003d false) return false;\n  var requestID \u003d generateUUID();\n  var resource \u003d {\n    name: driveName\n  };\n  try {\n    return Drive.Drives.insert(resource, requestID);\n  }\n  catch (err) {\n    Logger.log(JSON.stringify(err));\n    return false\n  }\n}\n\nfunction getSharedDriveServiceAgent(driveName) {\n  var query \u003d \u0027name \u003d \"\u0027 + driveName + \u0027\"\u0027;\n  var optionalArgs \u003d { \n    q: query\n  };\n  try {\n    var drivesList \u003d Drive.Drives.list(optionalArgs);\n  }\n  catch (err) {\n    Logger.log(JSON.stringify(err));\n    return false\n  }\n  if (drivesList \u0026\u0026 drivesList.items.length \u003e 0) return drivesList.items[0];\n  return false;\n}\n\nfunction deleteDriveServiceAgent(driveId) {\n  try {\n    Drive.Drives.remove(driveId);\n    return true;\n  }\n  catch (err) {\n    Logger.log(JSON.stringify(err));\n    return false;\n  }\n}\n\n// FOLDERS\n//\n// - CREATE FOLDER\n// - GET FOLDER\n\nfunction createFolderServiceAgent(folderName, parentObjectId) {\n  var resource \u003d {\n    title: folderName,\n    mimeType: \"application/vnd.google-apps.folder\",\n    parents:[{\n      \"id\": parentObjectId,\n    }]\n  };\n  var optionalArgs \u003d {\n    supportsAllDrives: true\n    };\n  try {\n    return Drive.Files.insert(resource, null, optionalArgs);\n  }  \n  catch (err) {\n    Logger.log(JSON.stringify(err));\n    return false\n  }\n}\n\nfunction getFolderServiceAgent(folderName) {\n  var query \u003d \u0027mimeType \u003d \"application/vnd.google-apps.folder\" AND title \u003d \"\u0027 + folderName + \u0027\"\u0027;\n  var optionalArgs \u003d { \n    q: query,\n    supportsAllDrives: true,\n    corpora: \"allDrives\",\n    includeItemsFromAllDrives : true\n  };\n  try {\n    var drivesList \u003d Drive.Files.list(optionalArgs);\n    if (drivesList.items.length \u003e 0) return drivesList.items[0];\n    return false;\n  }\n  catch (err) {\n    Logger.log(JSON.stringify(err));\n    return false\n  }\n}\n\nfunction deleteFolderServiceAgent(folderId) {\n  try {\n    var optionalArgs \u003d { \n      supportsAllDrives: true,\n      corpora: \"allDrives\",\n      includeItemsFromAllDrives : true\n    };\n    Drive.Files.remove(folderId, optionalArgs);\n    return true;\n  }\n  catch (err) {\n    Logger.log(JSON.stringify(err));\n    return false;\n  }\n}\n\n// PERMISSIONS\n//\n// - LIST PERMISSIONS IN ELEMENT\n// - SET PERMISSIONS TO ELEMENT\n// - DELETE PERMISSIONS IN ELEMENT\n\nfunction listPermissionsInElementServiceAgent(elementId) {\n  var optionalArgs \u003d { \n    supportsAllDrives: true\n    };\n  try {\n    return Drive.Permissions.list(elementId, optionalArgs);\n    }\n  catch (err) {\n    Logger.log(JSON.stringify(err));\n    return false\n  }\n}\n\nfunction setPermissionsToElementServiceAgent(elementId, userEmail, role) {\n  var resource \u003d {\n    role: role,\n    type: \"user\",\n    value: userEmail,\n  }\n  // optional arguments to work on Shared drive\n  var optionalArgs \u003d {\n    sendNotificationEmails: false,\n    supportsAllDrives: true\n  };\n  try {\n    Drive.Permissions.insert(resource, elementId, optionalArgs);\n    return true;\n  }\n  catch (err) {\n    Logger.log(JSON.stringify(err));\n    return false\n  }\n}\n\nfunction deletePermissionInElementServiceAgent(elementId, permissionId) {\n  var optionalArgs \u003d { \n    supportsAllDrives: true\n    };\n  try {\n    Drive.Permissions.remove(elementId, permissionId, optionalArgs);\n    return true;\n  }\n  catch (err) {\n    Logger.log(JSON.stringify(err));\n    return false\n  }\n}"},{"id":"fb3cd13a-88a1-4db4-9271-1da46c42c5ab","name":"03_spreadsheetServiceAgent","type":"server_js","source":"function getCurrentSpreadsheet() {\n  return SpreadsheetApp.getActiveSpreadsheet();\n}\n\nfunction getSpreadsheet(spreadsheetId) {\n  return SpreadsheetApp.openById(spreadsheetId);\n}\n"},{"id":"c76b2298-9ac6-4da6-8e48-95b53fdaef87","name":"04_aux","type":"server_js","source":"function variableInEnum(variable, myEnum) {\n  for (var value in myEnum) {\n    enumValue \u003d myEnum[value];\n    if (variable \u003d\u003d enumValue) return true;\n  }\n  return false;\n}\n\nfunction generateUUID() {\n  return Utilities.getUuid();\n}\n\nfunction createErnestLluchGroupEmail(groupName) {\n  return stringConverter(groupName) + DOMINI_CORREU_PROFESSORS;\n}\n\nfunction createErnestLluchTeacherUsername(firstName, lastName) {\n  return (stringConverter(firstName + lastName) + DOMINI_CORREU_PROFESSORS).toLowerCase();\n}\n\nfunction createErnestLluchStudentUsername(firstName, lastName, userType) {\n  return (stringConverter(firstName + lastName) + DOMINI_CORREU_ALUMNES).toLowerCase();\n\n}\n\nfunction replaceAccents(textWithAccents) {\n  return textWithAccents.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n}\n\nfunction stringConverter(textToConvert) {\n    return replaceAccents(textToConvert.replace(/\\s+/g, \u0027_\u0027)\n                        .toLowerCase());\n}"},{"id":"b01cb28a-4c02-4a62-86dc-fc77f01d1d4e","name":"04_config","type":"server_js","source":"const DriveRoles \u003d {\n  ORGANIZER: \u0027organizer\u0027,\n  WRITER: \u0027writer\u0027,\n  READER: \u0027reader\u0027,\n}\n\nconst FileRoles \u003d {\n  ORGANIZER: \u0027fileOrganizer\u0027,\n  WRITER: \u0027writer\u0027,\n  READER: \u0027reader\u0027,\n}\n\nconst ErnestLluchUserTypes \u003d {\n  TEACHER: \u0027teacher\u0027,\n  STUDENT: \u0027student\u0027,\n}\nconst DOMINI \u003d \"iernestlluch.cat\";\nconst DOMINI_CORREU_ALUMNES \u003d (Math.floor(Math.random() * 20) + 1).toString() + \u0027@iernestlluch.cat\u0027;\nconst DOMINI_CORREU_PROFESSORS \u003d \u0027@iernestlluch.cat\u0027;\nconst ORG_UNIT_TEACHERS \u003d \"/Personal educatiu\";\nconst ORG_UNIT_NEW_STUDENTS \u003d \"/Alumnes/Alumnes nous 2023-24\";\nconst ERNEST_LLUCH_DEFAULT_TEACHER_PASSWORD \u003d \"3rn3st_Lluch\"\nconst ERNEST_LLUCH_DEFAULT_STUDENT_PASSWORD \u003d \"Ernest_1234\""},{"id":"3b6187d5-f6a5-4e42-837f-4b145ac81f6d","name":"Sin título","type":"server_js","source":"function myFunction() {\n  Logger.log(getUserServiceAgent(\"admin@iernestlluch.cat\"));\n\n}\n"}]}